# Two-Sided SaaS Platform - Complete Development Prompt

## Project Overview
Build a complete two-sided SaaS platform with working functionality. Start with the Super Admin side first, then build the Client Business Admin side.

## PHASE 1: Super Admin Platform (START HERE)

### Core Requirements:
- **Framework**: Next.js 14 with TypeScript
- **Database**: PostgreSQL with Prisma ORM
- **Authentication**: NextAuth.js
- **Styling**: Tailwind CSS
- **State Management**: Zustand or React Context

### 1. Project Initialization
```bash
npx create-next-app@latest super-admin-platform --typescript --tailwind --eslint --app
cd super-admin-platform
npm install prisma @prisma/client next-auth bcryptjs zustand
```

### 2. Super Admin Dashboard Features (ALL MUST WORK):

#### A. Authentication System
- Login page with email/password
- Session management
- Protected routes
- Password reset functionality

#### B. Client Management Dashboard
- **Clients Overview Table** with:
  - Client business name
  - Contact person
  - Email
  - Phone
  - Plan type (Basic/Pro/Enterprise)
  - Status (Active/Inactive/Trial)
  - Registration date
  - Last login
  - Monthly revenue from client

#### C. Plan Management
- **Create/Edit Plans**:
  - Plan name
  - Price (monthly/yearly)
  - Features list
  - Max users allowed
  - Storage limit
  - Custom branding options

#### D. Revenue Analytics
- **Dashboard Charts**:
  - Monthly recurring revenue (MRR)
  - Client acquisition over time
  - Plan distribution pie chart
  - Churn rate
  - Average revenue per client

#### E. Super Admin Onboarding Management
- **View all onboarding sessions** in progress
- **Monitor completion rates** by step
- **Manual onboarding assistance** tools
- **Onboarding analytics** (drop-off points, completion time)
- **Send follow-up emails** for incomplete onboardings

### 3. Public Website (Client-Facing) with Integrated Onboarding

#### A. Landing Page
- **Hero section** with value proposition
- **Pricing plans comparison table** with "Get Started" buttons
- **Features showcase**
- **Customer testimonials section**
- **Contact form**

#### B. Complete Onboarding Flow (AFTER Plan Selection)
**Step 1: Plan Selection**
- User clicks "Get Started" on chosen plan
- Plan details confirmation page
- "Continue to Setup" button

**Step 2: Business Information**
- Business name (required)
- Contact person name (required)
- Business email (required)
- Phone number (optional)
- Business address
- Industry/Business type dropdown
- "Next Step" button

**Step 3: Account Creation**
- Create admin email (can be different from business email)
- Set password (with strength indicator)
- Confirm password
- Terms & conditions checkbox
- "Create Account" button

**Step 4: Payment Processing**
- Selected plan summary
- Stripe payment integration (test mode)
- Credit card form
- Billing address
- Apply coupon code option
- "Complete Purchase" button

**Step 5: Business Setup**
- Business logo upload
- Business description
- Operating hours setup
- Time zone selection
- Primary services/offerings (optional)
- "Almost Done" button

**Step 6: Final Setup & Welcome**
- Account creation confirmation
- Setup completion progress (100%)
- Welcome email sent notification
- "Access Your Dashboard" button
- Redirect to client business admin dashboard

#### C. Onboarding Progress Tracking
- **Progress bar** showing current step (1 of 6, 2 of 6, etc.)
- **Back/Previous** buttons on each step
- **Save & Continue Later** option
- **Auto-save** form data to prevent loss
- **Email reminder** for incomplete onboardings

### 4. Database Schema (Prisma)
```prisma
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  role      Role     @default(CLIENT)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  client    Client?
}

model OnboardingSession {
  id            String            @id @default(cuid())
  sessionId     String            @unique
  planId        String
  currentStep   Int               @default(1)
  isCompleted   Boolean           @default(false)
  businessData  Json?             // Store form data as JSON
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  completedAt   DateTime?
  plan          Plan              @relation(fields: [planId], references: [id])
  client        Client?           // Will be created after completion
}

model Client {
  id                  String              @id @default(cuid())
  businessName        String
  contactPerson       String
  email               String              @unique
  phone               String?
  businessAddress     String?
  industry            String?
  businessDescription String?
  logoUrl             String?
  operatingHours      Json?               // Store as JSON object
  timeZone            String?
  planId              String
  status              Status              @default(TRIAL)
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  plan                Plan                @relation(fields: [planId], references: [id])
  user                User                @relation(fields: [userId], references: [id])
  userId              String              @unique
  onboardingSession   OnboardingSession?  @relation(fields: [onboardingSessionId], references: [id])
  onboardingSessionId String?
}

model Plan {
  id                String              @id @default(cuid())
  name              String
  price             Float
  billing           Billing             @default(MONTHLY)
  features          String[]
  maxUsers          Int
  storageGB         Int
  isActive          Boolean             @default(true)
  clients           Client[]
  onboardingSessions OnboardingSession[]
}

enum Role {
  SUPER_ADMIN
  CLIENT
}

enum Status {
  TRIAL
  ACTIVE
  INACTIVE
  CANCELLED
}

enum Billing {
  MONTHLY
  YEARLY
}
```

### 5. Required API Routes (ALL MUST FUNCTION):

#### Super Admin Routes:
- `POST /api/auth/login` - Authentication
- `GET /api/clients` - List all clients
- `POST /api/clients` - Create new client
- `PUT /api/clients/[id]` - Update client
- `DELETE /api/clients/[id]` - Delete client
- `GET /api/plans` - List all plans
- `POST /api/plans` - Create plan
- `PUT /api/plans/[id]` - Update plan
- `DELETE /api/plans/[id]` - Delete plan
- `GET /api/analytics/revenue` - Revenue data
- `GET /api/analytics/clients` - Client analytics
- `GET /api/onboarding/sessions` - All onboarding sessions
- `GET /api/onboarding/analytics` - Onboarding completion stats

#### Public Website & Onboarding Routes:
- `GET /api/public/plans` - Get available plans for website
- `POST /api/onboarding/start` - Start onboarding session
- `PUT /api/onboarding/[sessionId]/step/[stepNumber]` - Save step data
- `GET /api/onboarding/[sessionId]` - Get onboarding session data
- `POST /api/onboarding/[sessionId]/complete` - Complete onboarding & create client
- `POST /api/payment/process` - Process Stripe payment
- `POST /api/payment/webhook` - Stripe webhook handler
- `POST /api/upload/logo` - Upload business logo

### 6. UI Components Needed:

#### Super Admin Components:
- DataTable with sorting/filtering/pagination
- Modal dialogs for forms
- Charts (use Chart.js or Recharts)
- Form validation with error states
- Loading states and skeletons
- Error handling with toast notifications
- Responsive sidebar navigation
- Client status badges
- Revenue trend indicators

#### Public Website Components:
- **Pricing Cards** with plan comparison
- **Multi-step Onboarding Wizard** with:
  - Progress bar component
  - Step navigation (back/next)
  - Form validation for each step
  - Auto-save functionality
  - Payment form with Stripe Elements
  - File upload for logo
  - Success/confirmation screens
- **Landing Page Sections**:
  - Hero with call-to-action
  - Features grid
  - Testimonials carousel
  - Contact form
- Mobile-responsive design throughout

## PHASE 2: Client Business Admin Platform (AFTER PHASE 1)

### Core Features:
- **Dashboard**: Business metrics, appointments, revenue
- **Appointment Scheduler**: Calendar integration, booking management
- **Service Management**: Add/edit services, pricing, availability
- **Customer Management**: Client database, history, notes
- **Website Builder**: Simple drag-drop website creator
- **Analytics**: Appointment trends, revenue tracking, customer insights

## Development Instructions for Replit AI:

### Step-by-Step Process:
1. **Initialize the Next.js project** with all dependencies
2. **Set up Prisma** with the provided schema including OnboardingSession model
3. **Create authentication system** with working login/logout for super admin
4. **Build the Super Admin dashboard** with real data operations
5. **Implement client management** with full CRUD operations
6. **Add analytics dashboard** with working charts
7. **Create public landing page** with pricing plans
8. **Build complete 6-step onboarding flow**:
   - Plan selection → Business info → Account creation → Payment → Business setup → Welcome
   - Each step must save data and allow navigation back/forward
   - Payment integration with Stripe (test mode)
   - Auto-save progress to prevent data loss
9. **Implement onboarding tracking** for super admin to monitor progress
10. **Test entire flow** from plan selection to client dashboard access

### Critical Requirements:
- **All buttons must work** - no placeholder functions
- **Real database operations** - actual data persistence
- **Proper error handling** - user-friendly error messages
- **Responsive design** - works on mobile and desktop
- **Form validation** - client and server-side validation
- **Loading states** - show loading indicators during operations
- **Authentication protection** - secure route protection

### UI/UX Requirements:
- Modern, professional design
- Intuitive navigation
- Clear data visualization
- Fast loading times
- Accessible design (WCAG compliance)

## Expected Deliverables:
1. **Fully functional Super Admin platform** with client management
2. **Complete public website** with professional landing page
3. **6-step onboarding flow** that works end-to-end:
   - Plan selection from website
   - Complete business information collection
   - Account creation with validation
   - Stripe payment processing (test mode)
   - Business setup and customization  
   - Final confirmation and dashboard access
4. **Complete database** with sample data and onboarding tracking
5. **All API endpoints functioning** with proper error handling
6. **Responsive design** across devices
7. **Documentation** for setup and usage
8. **Super admin onboarding monitoring** tools

## Sample Data to Include:
- 5 sample clients with different plans
- 3 different pricing plans
- Sample revenue data for charts
- Mock onboarding flow data

Start with Phase 1 (Super Admin platform) and ensure every feature works before moving to Phase 2. Focus on functionality over aesthetics initially, but maintain a professional appearance.