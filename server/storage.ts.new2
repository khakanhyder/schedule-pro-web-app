import { 
  users, type User, type InsertUser,
  services, type Service, type InsertService,
  stylists, type Stylist, type InsertStylist,
  appointments, type Appointment, type InsertAppointment,
  reviews, type Review, type InsertReview,
  contactMessages, type ContactMessage, type InsertContactMessage
} from "@shared/schema";
import { type IndustryData, industryDatabase } from "./industryData";

export interface IStorage {
  // Users
  getUser(id: number): Promise<User | undefined>;
  getUserByUsername(username: string): Promise<User | undefined>;
  createUser(user: InsertUser): Promise<User>;
  
  // Services
  getServices(): Promise<Service[]>;
  getService(id: number): Promise<Service | undefined>;
  createService(service: InsertService): Promise<Service>;
  
  // Stylists
  getStylists(): Promise<Stylist[]>;
  getStylist(id: number): Promise<Stylist | undefined>;
  createStylist(stylist: InsertStylist): Promise<Stylist>;
  
  // Appointments
  getAppointments(): Promise<Appointment[]>;
  getAppointment(id: number): Promise<Appointment | undefined>;
  getAppointmentsByDate(date: Date): Promise<Appointment[]>;
  createAppointment(appointment: InsertAppointment): Promise<Appointment>;
  
  // Reviews
  getReviews(): Promise<Review[]>;
  getPublishedReviews(): Promise<Review[]>;
  createReview(review: InsertReview): Promise<Review>;
  
  // Contact Messages
  createContactMessage(message: InsertContactMessage): Promise<ContactMessage>;
  
  // Industry management
  setIndustry(industryId: string): void;
  getCurrentIndustry(): IndustryData;
}

export class MemStorage implements IStorage {
  private users = new Map<number, User>();
  private services = new Map<number, Service>();
  private stylists = new Map<number, Stylist>();
  private appointments = new Map<number, Appointment>();
  private reviews = new Map<number, Review>();
  private contactMessages = new Map<number, ContactMessage>();
  
  private userCurrentId = 1;
  private serviceCurrentId = 1;
  private stylistCurrentId = 1;
  private appointmentCurrentId = 1;
  private reviewCurrentId = 1;
  private contactMessageCurrentId = 1;
  
  private currentIndustryId = "beauty";

  constructor() {
    this.initializeServices();
    this.initializeStylists();
    this.initializeReviews();
  }

  // Industry-specific methods
  setIndustry(industryId: string): void {
    if (industryDatabase[industryId]) {
      this.currentIndustryId = industryId;
      
      // Reinitialize services and professionals
      this.services.clear();
      this.stylists.clear();
      this.serviceCurrentId = 1;
      this.stylistCurrentId = 1;
      
      this.initializeServices();
      this.initializeStylists();
    }
  }
  
  getCurrentIndustry(): IndustryData {
    return industryDatabase[this.currentIndustryId];
  }

  private initializeServices(): void {
    const industry = industryDatabase[this.currentIndustryId];
    
    if (!industry) {
      console.error(`Industry ${this.currentIndustryId} not found!`);
      return;
    }
    
    // Create services based on the current industry
    for (let i = 0; i < industry.services.length; i++) {
      const name = industry.services[i];
      const description = industry.serviceDescriptions[i] || `Professional ${name}`;
      
      // Generate price based on service index
      const basePrice = 45 + (i * 10);
      const price = `${basePrice}${i % 2 === 0 ? '' : '+'}`;
      
      // Generate duration based on service index
      const durations = [30, 45, 60, 90, 120];
      const durationMinutes = durations[i % durations.length];
      
      const service: InsertService = {
        name,
        description,
        price,
        durationMinutes
      };
      
      this.createService(service);
    }
  }
  
  private initializeStylists(): void {
    const industry = industryDatabase[this.currentIndustryId];
    
    if (!industry) {
      console.error(`Industry ${this.currentIndustryId} not found!`);
      return;
    }
    
    // Create professionals based on the current industry
    for (let i = 0; i < industry.professionalNames.length; i++) {
      const name = industry.professionalNames[i];
      const bio = industry.professionalBios[i] || `${name} is an experienced ${industry.professionalName}`;
      
      const stylist: InsertStylist = {
        name,
        bio,
        imageUrl: null
      };
      
      this.createStylist(stylist);
    }
  }

  private initializeReviews(): void {
    const sampleReviews: InsertReview[] = [
      {
        name: "Emma Johnson",
        email: "emma@example.com",
        rating: 5,
        text: "Absolutely amazing service! So happy with my experience and will definitely be coming back.",
        date: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000), // 2 days ago
        publishConsent: true,
        published: true
      },
      {
        name: "Michael Smith",
        email: "michael@example.com",
        rating: 4,
        text: "Great service, very professional and attentive to my needs. Highly recommended!",
        date: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000), // 7 days ago
        publishConsent: true,
        published: true
      },
      {
        name: "Sophia Williams",
        email: "sophia@example.com",
        rating: 5,
        text: "Excellent experience from start to finish. The attention to detail was impressive!",
        date: new Date(Date.now() - 14 * 24 * 60 * 60 * 1000), // 14 days ago
        publishConsent: true,
        published: true
      }
    ];

    sampleReviews.forEach(review => this.createReview(review));
  }

  // User methods
  async getUser(id: number): Promise<User | undefined> {
    return this.users.get(id);
  }

  async getUserByUsername(username: string): Promise<User | undefined> {
    for (const user of this.users.values()) {
      if (user.username === username) {
        return user;
      }
    }
    return undefined;
  }

  async createUser(insertUser: InsertUser): Promise<User> {
    const id = this.userCurrentId++;
    const user: User = { ...insertUser, id };
    this.users.set(id, user);
    return user;
  }

  // Service methods
  async getServices(): Promise<Service[]> {
    return Array.from(this.services.values());
  }

  async getService(id: number): Promise<Service | undefined> {
    return this.services.get(id);
  }

  async createService(insertService: InsertService): Promise<Service> {
    const id = this.serviceCurrentId++;
    const service: Service = { ...insertService, id };
    this.services.set(id, service);
    return service;
  }

  // Stylist methods
  async getStylists(): Promise<Stylist[]> {
    return Array.from(this.stylists.values());
  }

  async getStylist(id: number): Promise<Stylist | undefined> {
    return this.stylists.get(id);
  }

  async createStylist(insertStylist: InsertStylist): Promise<Stylist> {
    const id = this.stylistCurrentId++;
    const stylist: Stylist = { 
      id, 
      name: insertStylist.name, 
      bio: insertStylist.bio || null,
      imageUrl: insertStylist.imageUrl || null
    };
    this.stylists.set(id, stylist);
    return stylist;
  }

  // Appointment methods
  async getAppointments(): Promise<Appointment[]> {
    return Array.from(this.appointments.values());
  }

  async getAppointment(id: number): Promise<Appointment | undefined> {
    return this.appointments.get(id);
  }

  async getAppointmentsByDate(date: Date): Promise<Appointment[]> {
    return Array.from(this.appointments.values()).filter(appointment => {
      const appointmentDate = new Date(appointment.date);
      return (
        appointmentDate.getFullYear() === date.getFullYear() &&
        appointmentDate.getMonth() === date.getMonth() &&
        appointmentDate.getDate() === date.getDate()
      );
    });
  }

  async createAppointment(insertAppointment: InsertAppointment): Promise<Appointment> {
    const id = this.appointmentCurrentId++;
    const appointment: Appointment = {
      id,
      date: insertAppointment.date,
      serviceId: insertAppointment.serviceId,
      stylistId: insertAppointment.stylistId,
      clientName: insertAppointment.clientName,
      clientEmail: insertAppointment.clientEmail,
      clientPhone: insertAppointment.clientPhone,
      notes: insertAppointment.notes || null,
      confirmed: insertAppointment.confirmed || null,
      emailConfirmation: insertAppointment.emailConfirmation || null,
      smsConfirmation: insertAppointment.smsConfirmation || null
    };
    this.appointments.set(id, appointment);
    return appointment;
  }

  // Review methods
  async getReviews(): Promise<Review[]> {
    return Array.from(this.reviews.values());
  }

  async getPublishedReviews(): Promise<Review[]> {
    return Array.from(this.reviews.values()).filter(review => review.published);
  }

  async createReview(insertReview: InsertReview): Promise<Review> {
    const id = this.reviewCurrentId++;
    const review: Review = {
      id,
      name: insertReview.name,
      email: insertReview.email,
      rating: insertReview.rating,
      text: insertReview.text,
      date: insertReview.date,
      publishConsent: insertReview.publishConsent || null,
      published: insertReview.published || null
    };
    this.reviews.set(id, review);
    return review;
  }

  // Contact message methods
  async createContactMessage(insertMessage: InsertContactMessage): Promise<ContactMessage> {
    const id = this.contactMessageCurrentId++;
    const message: ContactMessage = {
      id,
      name: insertMessage.name,
      email: insertMessage.email,
      subject: insertMessage.subject,
      message: insertMessage.message,
      date: new Date()
    };
    this.contactMessages.set(id, message);
    return message;
  }
}

export const storage = new MemStorage();